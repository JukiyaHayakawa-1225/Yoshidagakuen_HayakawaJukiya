//*****************************************************************************
//
//     配置物の処理[object.cpp]
//     Auther:Hodaka Niwa
//
//*****************************************************************************
#include "object.h"
#include "model.h"
#include "motion.h"
#include "manager.h"
#include "renderer.h"

//*****************************************************************************
//    マクロ定義
//*****************************************************************************


//*****************************************************************************
//    静的メンバ変数
//*****************************************************************************

//=============================================================================
//    コンストラクタ
//=============================================================================
CObject::CObject(int nPriority, OBJTYPE objType) : CObject3D(nPriority, objType)
{
	// 各種値のクリア
	m_nType = 0;
	m_nNumModel = 0;
	m_apModel = NULL;
	m_pMotionManager = NULL;
	m_fAlpha = 0.0f;
}

//=============================================================================
//    デストラクタ
//=============================================================================
CObject::~CObject()
{

}

//=============================================================================
//    生成処理
//=============================================================================
CObject *CObject::Create(D3DXVECTOR3 pos, D3DXVECTOR3 rot, int nType, int nPriority)
{
	CObject *pObject = NULL;      // 配置物クラス型のポインタ
	if (pObject == NULL)
	{// メモリが空になっている
		pObject = new CObject(nPriority);
		if (pObject != NULL)
		{// インスタンスを生成できた
		    // 各種値の設定
			pObject->SetPos(pos);              // 座標
			pObject->SetRot(rot);              // 向き
			pObject->SetType(nType);           // 種類番号
			pObject->SetAlpha(1.0f);           // モデルの透明度

			if (FAILED(pObject->Init()))
			{// 初期化に失敗した
				return NULL;
			}
		}
		else
		{// インスタンスを生成できなかった
			return NULL;
		}
	}
	else
	{// インスタンスを生成できなかった
		return NULL;
	}

	return pObject;
}

//=============================================================================
//    初期化処理
//=============================================================================
HRESULT CObject::Init(void)
{
	return S_OK;
}

//=============================================================================
//    終了処理
//=============================================================================
void CObject::Uninit(void)
{
	// モデルの破棄
	if (m_apModel != NULL)
	{
		ReleaseModel();
	}

	// モーション管轄クラスの破棄
	ReleaseMotionManager();

	// オブジェクト3Dの終了処理
	CObject3D::Uninit();
}

//=============================================================================
//    更新処理
//=============================================================================
void CObject::Update(void)
{
	// モーションの更新
	if (m_pMotionManager != NULL)
	{
		m_pMotionManager->Update(m_apModel);
	}
}

//=============================================================================
//    描画処理
//=============================================================================
void CObject::Draw(void)
{
	//レンダリングの取得
	CRenderer *pRenderer;
	pRenderer = CManager::GetRenderer();

	if (pRenderer != NULL)
	{// レンダリングクラスが生成されている
	    // デバイスの取得
		LPDIRECT3DDEVICE9 pDevice = pRenderer->GetDevice();
		if (pDevice != NULL)
		{// デバイスが取得できた
		    // ワールドマトリックス設定処理
			SetMtxWorld(pDevice);

			// モデルの描画
			if (m_apModel != NULL)
			{
				ModelDraw();
			}
		}
	}

	// 3Dオブジェクトの描画
	CObject3D::Draw();
}

//=============================================================================
//    モデルの描画
//=============================================================================
void CObject::ModelDraw(void)
{
	for (int nCntModel = 0; nCntModel < m_nNumModel; nCntModel++)
	{
		if (m_apModel[nCntModel] != NULL)
		{
			m_apModel[nCntModel]->SetAlpha(m_fAlpha);
			m_apModel[nCntModel]->Draw();
			m_apModel[nCntModel]->SetAlpha(1.0f);
		}
	}
}

//=============================================================================
//    モデルの破棄
//=============================================================================
void CObject::ReleaseModel(void)
{
	for (int nCntModel = 0; nCntModel < m_nNumModel; nCntModel++)
	{
		if (m_apModel[nCntModel] != NULL)
		{
			m_apModel[nCntModel]->Uninit();
			delete m_apModel[nCntModel];
			m_apModel[nCntModel] = NULL;
		}
	}

	delete[] m_apModel;
	m_apModel = NULL;
}

//=============================================================================
//    モーションの破棄
//=============================================================================
void CObject::ReleaseMotionManager(void)
{
	if (m_pMotionManager != NULL)
	{
		m_pMotionManager->Uninit();
		delete m_pMotionManager;
		m_pMotionManager = NULL;
	}
}

//=============================================================================
//    種類番号設定処理
//=============================================================================
void CObject::SetType(const int nType)
{
	m_nType = nType;
}

//=============================================================================
//    使用しているモデルの数設定処理
//=============================================================================
void CObject::SetNumModel(const int nNumModel)
{
	m_nNumModel = nNumModel;
}

//=============================================================================
//    モデルクラスへのポインタ設定処理
//=============================================================================
void CObject::SetModel(CModel **apModel)
{
	m_apModel = apModel;
}
void CObject::SetModel(CModel *pModel, int nIdx)
{
	m_apModel[nIdx] = pModel;
}

//=============================================================================
//    モーション管轄クラスへのポインタを設定する処理
//=============================================================================
void CObject::SetMotionManager(CMotionManager *pMotionManager)
{
	m_pMotionManager = pMotionManager;
}

//=============================================================================
//    配置物の透明度設定処理
//=============================================================================
void CObject::SetAlpha(const float fAlpha)
{
	m_fAlpha = fAlpha;
}

//=============================================================================
//    種類番号取得処理
//=============================================================================
int CObject::GetType(void)
{
	return m_nType;
}

//=============================================================================
//    使用しているモデルの数を設定する処理
//=============================================================================
int CObject::GetNumModel(void)
{
	return m_nNumModel;
}

//=============================================================================
//    モデルクラスへのポインタを設定する処理
//=============================================================================
CModel **CObject::GetModel(void)
{
	return m_apModel;
}
CModel *CObject::GetModel(int nIdx)
{
	return m_apModel[nIdx];
}

//=============================================================================
//    モーション管轄クラスへのポインタを設定する処理
//=============================================================================
CMotionManager *CObject::GetMotionManager(void)
{
	return m_pMotionManager;
}

//=============================================================================
//    配置物の透明度取得処理
//=============================================================================
float CObject::GetAlpha(void)
{
	return m_fAlpha;
}