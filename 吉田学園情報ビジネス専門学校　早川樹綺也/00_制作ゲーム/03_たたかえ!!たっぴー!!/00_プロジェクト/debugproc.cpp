//=============================================================================
//
// デバッグ用のプロシージャの処理 [debugproc.cpp]
// Author : Jukiya Hayakawa
//
//=============================================================================
#include "debugproc.h"
#include "renderer.h"
#include "manager.h"

//=============================================================================
// マクロ定義
//=============================================================================
//#define DEBUGPROC_DISP     // 宣言時 : デバッグ情報描画

//=============================================================================
// 静的メンバ変数宣言
//=============================================================================
LPD3DXFONT		CDebugProc::m_pFont;
char			CDebugProc::m_aStr[MAX_CHAR];
bool            CDebugProc::m_bDisp = true;

//=============================================================================
// デバッグ用のプロシージャコンストラクタ
//=============================================================================
CDebugProc::CDebugProc()
{

}

//=============================================================================
// デバッグ用のプロシージャデストラクタ
//=============================================================================
CDebugProc::~CDebugProc()
{

}

//=============================================================================
// デバッグ用のプロシージャの初期化処理
//=============================================================================
void CDebugProc::Init(void)
{
#ifdef DEBUGPROC_DISP
	//レンダリングの取得
	CRenderer *pRenderer;
	pRenderer = CManager::GetRenderer();

	//デバイスの取得
	LPDIRECT3DDEVICE9 pDevice;
	pDevice = pRenderer->GetDevice();

	// デバッグ情報表示用フォントの生成
	D3DXCreateFont(pDevice, 18, 0, 0, 0, FALSE, SHIFTJIS_CHARSET,
		OUT_DEFAULT_PRECIS, DEFAULT_QUALITY, DEFAULT_PITCH, "Terminal", &m_pFont);
#endif
}

//=============================================================================
// デバッグ用のプロシージャの終了処理
//=============================================================================
void CDebugProc::Uninit(void)
{
#ifdef DEBUGPROC_DISP
	//デバッグ情報表示用のフォントの破棄
	if (m_pFont != NULL)
	{
		m_pFont->Release();
		m_pFont = NULL;
	}
#endif
}

//=============================================================================
// デバッグ用のプロシージャの更新処理
//=============================================================================
void CDebugProc::Print(int nNumber,char *fmt, ...)
{
#ifdef DEBUGPROC_DISP
	char cStr[MAX_CHAR];				//文字の最大数
	cStr[0] = '\0';						//初期化
	va_list ap;							//可変引数格納

	va_start(ap, fmt);					//可変引数リストの初期化処理
	vsprintf(cStr, fmt, ap);			//書式文字列を可変長引数リストのデータに従って文字列に書き込み

	if (nNumber == 0)
	{
		wsprintf(&m_aStr[0], &cStr[0]);	//書式文字列をフォーマットし文字列に書き込み
	}
	else if (nNumber == 1)
	{
		strcat(&m_aStr[0], &cStr[0]);	//上書き
	}
	va_end(ap);							//可変引数リストの終了処理
#endif
}

//=============================================================================
// デバッグ用のプロシージャの文字列クリア
//=============================================================================
void CDebugProc::ClearString(void)
{
	ZeroMemory(&m_aStr, sizeof(m_aStr));
}

//=============================================================================
// デバッグ用のプロシージャの描画
//=============================================================================
void CDebugProc::Draw(void)
{
#ifdef DEBUGPROC_DISP
	if (m_bDisp == true)
	{
		RECT rect = { 0, 0, SCREEN_WIDTH, SCREEN_HEIGHT };

		// テキスト描画
		m_pFont->DrawText(NULL, m_aStr, -1, &rect, DT_LEFT, D3DCOLOR_ARGB(0xff, 0xff, 0xff, 0xff));
	}
	ClearString();
#endif
}

//=============================================================================
// デバッグ用のプロシージャの描画するかどうかを切り替える処理
//=============================================================================
void CDebugProc::SwitchDisp(void)
{
	m_bDisp = m_bDisp ? false : true;
}