//*****************************************************************************
//
//     ファイル保存の処理[fileSaver.cpp]
//     Auther:Hodaka Niwa
//
//*****************************************************************************
#include "fileSaver.h"

//*****************************************************************************
//    マクロ定義
//*****************************************************************************

//*****************************************************************************
//    静的メンバ変数宣言
//*****************************************************************************

//=============================================================================
//    コンストラクタ
//=============================================================================
CFileSaver::CFileSaver(char *pSaveFileName)
{
	// 各種値のクリア
	m_pFile = NULL;                          // ファイルポインタ
	strcpy(m_aSaveFileName, pSaveFileName);  // 保存するファイル名
}

//=============================================================================
//    デストラクタ
//=============================================================================
CFileSaver::~CFileSaver()
{

}

//=============================================================================
//    生成処理
//=============================================================================
CFileSaver *CFileSaver::Create(char *pSaveFileName)
{
	CFileSaver *pFileSaver = NULL;	// ファイル保存クラスへのポインタ
	if (pFileSaver == NULL)
	{
		pFileSaver = new CFileSaver(pSaveFileName);
		if (pFileSaver != NULL)
		{
			// 初期化処理
			if (FAILED(pFileSaver->Init()))
			{
				delete pFileSaver;
				return NULL;
			}
		}
		else
		{
			return NULL;
		}
	}

	return pFileSaver;
}

//=============================================================================
//    初期化処理
//=============================================================================
HRESULT CFileSaver::Init(void)
{
	// ファイルを開く
	if (m_pFile == NULL)
	{
		m_pFile = fopen(m_aSaveFileName, "w");
		if (m_pFile == NULL)
		{// ファイルポインタ取得に失敗
			return E_FAIL;
		}
	}
	else
	{
		return E_FAIL;
	}

	return S_OK;
}

//=============================================================================
//    終了処理
//=============================================================================
void CFileSaver::Uninit(void)
{
	// ファイルを閉じる
	if (m_pFile != NULL)
	{
		fclose(m_pFile);
	}
}

//=============================================================================
//    ファイルに文字を出力する処理
//=============================================================================
void CFileSaver::Print(char *fmt, ...)
{
	va_list list;   // 可変長引数(... の引数を受け取ることができる)
	char Str[256];  // 文字列格納用変数

	// ファイルに出力する文字列を作成
	va_start(list, fmt);       // 可変長引数リストを初期化(fmt以下の引数を登録)
	vsprintf(Str, fmt, list);  // 文字列を標準出力にのっとって書き出し
	va_end(list);              // 引数リストをクリア

	// ファイルに文字列を書き出す
	if (m_pFile != NULL)
	{
		fprintf(m_pFile, "%s", Str);
	}
}

//=============================================================================
//    保存するファイル名を設定する
//=============================================================================
void CFileSaver::SetSavefileName(char *pFileName)
{
	strcpy(m_aSaveFileName, pFileName);
}

//=============================================================================
//    保存するファイル名を取得する
//=============================================================================
char *CFileSaver::GetSavefileName(void)
{
	return m_aSaveFileName;
}