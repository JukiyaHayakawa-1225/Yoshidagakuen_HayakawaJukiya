//=============================================================================
//
// スコアの処理 [score.cpp]
// Author : Jukiya Hayakawa
//
//=============================================================================
#include "score.h"
#include "renderer.h"
#include "manager.h"
#include "input.h"
#include "number.h"

//=============================================================================
// 静的メンバ変数宣言
//=============================================================================

//=============================================================================
// マクロ定義
//=============================================================================

//=============================================================================
// グローバル変数
//=============================================================================

//=============================================================================
// コンストラクタ
//=============================================================================
CScore::CScore() : CScene(6, OBJTYPE_NUMBER)
{
	m_pos = INITIALIZE_D3DXVECTOR3;				//位置
	m_col = D3DXCOLOR(1.0f, 1.0f, 1.0f, 1.0f);	//色
	m_fWidth = 0.0f;							//幅
	m_fHeight = 0.0f;							//高さ
	m_nDigit = SCORE_DIGIT;						//桁数
	m_nScore = 0;								//スコア
	m_apNumber = NULL;							//数字のポインタ
}
//=============================================================================
// デストラクタ
//=============================================================================
CScore::~CScore()
{

}

//=============================================================================
// スコアの生成
//=============================================================================
CScore *CScore::Create(D3DXVECTOR3 pos, float fWidth, float fHeight,int nDigit)
{
	CScore *pScore = NULL;
	if (pScore == NULL)
	{
		pScore = new CScore;		//スコアの動的確保
		if (pScore != NULL)
		{
			pScore->SetPos(pos);		//位置の設置処理
			pScore->SetWidth(fWidth);	//幅の設置処理
			pScore->SetHeight(fHeight);	//高さの設置処理
			pScore->SetDigit(nDigit);	//桁数の設置処理
			pScore->Init();				//初期化処理
		}
	}
	return pScore;					//値を返す
}

//=============================================================================
// 初期化処理
//=============================================================================
HRESULT CScore::Init(void)
{
	if (m_apNumber == NULL)
	{
		m_apNumber = new CNumber*[m_nDigit];	//桁数分動的確保
		if (m_apNumber != NULL)
		{
			for (int nCntNumber = 0; nCntNumber < m_nDigit; nCntNumber++)
			{
				m_apNumber[nCntNumber] = NULL;
				if (m_apNumber[nCntNumber] == NULL)
				{
					CManager::MODE mode = CManager::GetMode();
					if (mode == CManager::MODE_GAME)
					{//ゲームの場合
						//数字の生成
						m_apNumber[nCntNumber] = CNumber::Create(D3DXVECTOR3(m_pos.x - (70 * nCntNumber), m_pos.y, m_pos.z), m_fWidth, m_fHeight);
					}
					else if (mode == CManager::MODE_RESULT)
					{//リザルトの場合
						//数字の生成
						m_apNumber[nCntNumber] = CNumber::Create(D3DXVECTOR3(m_pos.x - (70 * nCntNumber), m_pos.y, m_pos.z), m_fWidth, m_fHeight);
					}
					else if (mode == CManager::MODE_RANKING)
					{//ランキングの場合
						//数字の生成
						m_apNumber[nCntNumber] = CNumber::Create(D3DXVECTOR3(m_pos.x - (90 * nCntNumber), m_pos.y, m_pos.z), m_fWidth, m_fHeight);
					}
				}
			}
		}
	}
	m_nScore = 0;	//スコアの初期化

	return S_OK;
}

//=============================================================================
// 終了処理
//=============================================================================
void CScore::Uninit(void)
{
	//終了処理
	if (m_apNumber != NULL)
	{
		for (int nCntNumber = 0; nCntNumber < m_nDigit; nCntNumber++)
		{//桁数分繰り返し
			if (m_apNumber[nCntNumber] != NULL)
			{
				//終了処理
				m_apNumber[nCntNumber]->Uninit();
				//メモリの開放
				delete m_apNumber[nCntNumber];
				//NULLにする
				m_apNumber[nCntNumber] = NULL;
			}
		}
		delete[] m_apNumber;
		m_apNumber = NULL;
	}
	Release();
}

//=============================================================================
// 更新処理
//=============================================================================
void CScore::Update(void)
{

}

//=============================================================================
// 描画処理
//=============================================================================
void CScore::Draw(void)
{
	for (int nCntNumber = 0; nCntNumber < m_nDigit; nCntNumber++)
	{//桁数分繰り返し
		if (m_apNumber[nCntNumber] != NULL)
		{
			//数字の描画処理
			m_apNumber[nCntNumber]->Draw();
		}
	}
}

//=============================================================================
// 位置の設置処理
//=============================================================================
void CScore::SetPos(D3DXVECTOR3 pos)
{
	m_pos = pos;
}

//=============================================================================
// 色の設置処理
//=============================================================================
void CScore::SetCol(D3DXCOLOR col)
{
	m_col = col;
}

//=============================================================================
// 幅の設置処理
//=============================================================================
void CScore::SetWidth(float fWidth)
{
	m_fWidth = fWidth;
}

//=============================================================================
// 高さの設置処理
//=============================================================================
void CScore::SetHeight(float fHeight)
{
	m_fHeight = fHeight;
}

//=============================================================================
// 桁の設置処理
//=============================================================================
void CScore::SetDigit(int nDigit)
{
	m_nDigit = nDigit;
}

//=============================================================================
// スコアの設置処理
//=============================================================================
void CScore::SetScore(int nScore)
{
	//加算
	m_nScore += nScore;
}

//=============================================================================
// 位置の取得処理
//=============================================================================
D3DXVECTOR3 CScore::GetPos(void)
{
	//値を返す
	return m_pos;
}

//=============================================================================
// 色の取得処理
//=============================================================================
D3DXCOLOR CScore::GetCol(void)
{
	//値を返す
	return m_col;
}

//=============================================================================
// 幅の取得処理
//=============================================================================
float CScore::GetWidth(void)
{
	//値を返す
	return m_fWidth;
}

//=============================================================================
// 高さの取得処理
//=============================================================================
float CScore::GetHeight(void)
{
	//値を返す
	return m_fHeight;
}

//=============================================================================
// 桁数の取得処理
//=============================================================================
int CScore::GetDigit(void)
{
	//値を返す
	return m_nDigit;
}

//=============================================================================
// スコアの取得処理
//=============================================================================
int CScore::GetScore(void)
{
	//値を返す
	return m_nScore;
}


//=============================================================================
// スコアの加算処理
//=============================================================================
void CScore::AddScore(int nValue)
{
	int nAnswer = 1;
	int nScore = 0;

	m_nScore += nValue;

	for (int nCntNumber = 0; nCntNumber < m_nDigit; nCntNumber++)
	{
		nScore = m_nScore % (nAnswer * 10) / nAnswer;
		//数字の設置
		m_apNumber[nCntNumber]->SetNumber(nScore);
		nAnswer *= 10;
	}
}
