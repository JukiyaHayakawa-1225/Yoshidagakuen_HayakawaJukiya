//=============================================================================
//
// キャラクターの処理 [character.cpp]
// Author : Jukiya Hayakawa
//
//=============================================================================
#include "character.h"

//=============================================================================
// コンストラクタ
//=============================================================================
CCharacter::CCharacter(int nPriority,OBJTYPE objtype) : CScene(nPriority, objtype)
{
	m_pos = INITIALIZE_D3DXVECTOR3;		//位置
	m_posOld = INITIALIZE_D3DXVECTOR3;	//過去の位置
	m_rot = INITIALIZE_D3DXVECTOR3;		//向き
	m_move = INITIALIZE_D3DXVECTOR3;	//移動量
	m_nLife = 0;						//体力
	m_nMaxLife = 0;						//体力最大値
	m_fColRange = 0.0f;					//当たり判定の大きさ
}

//=============================================================================
// デストラクタ
//=============================================================================
CCharacter::~CCharacter()
{

}

//=============================================================================
// 初期化処理
//=============================================================================
HRESULT CCharacter::Init(void)
{
	m_pos = INITIALIZE_D3DXVECTOR3;		//位置
	m_posOld = INITIALIZE_D3DXVECTOR3;	//過去の位置
	m_move = INITIALIZE_D3DXVECTOR3;	//移動量
	m_nLife = 10;						//体力
	m_nMaxLife = 10;					//体力最大値

	return S_OK;
}

//=============================================================================
// 終了処理
//=============================================================================
void CCharacter::Uninit(void)
{
	//データの破棄
	Release();
}

//=============================================================================
// 更新処理
//=============================================================================
void CCharacter::Update(void)
{

}

//=============================================================================
// 描画処理
//=============================================================================
void CCharacter::Draw(void)
{

}

//=============================================================================
// 位置の設置処理
//=============================================================================
void CCharacter::SetPos(D3DXVECTOR3 pos)
{
	m_pos = pos;
}

//=============================================================================
// 位置の設置処理
//=============================================================================
void CCharacter::SetPosOld(D3DXVECTOR3 posOld)
{
	m_posOld = posOld;
}

//=============================================================================
// 向きの設置処理
//=============================================================================
void CCharacter::SetRot(D3DXVECTOR3 rot)
{
	m_rot = rot;
}

//=============================================================================
// 移動量の設置処理
//=============================================================================
void CCharacter::SetMove(D3DXVECTOR3 move)
{
	m_move = move;
}

//=============================================================================
// 移動量の設置処理
//=============================================================================
void CCharacter::SetColRange(float fColRange)
{
	m_fColRange = fColRange;
}

//=============================================================================
// 体力の設置処理
//=============================================================================
void CCharacter::SetLife(int nLife)
{
	m_nLife = nLife;
}

//=============================================================================
// 体力最大値の設置処理
//=============================================================================
void CCharacter::SetMaxLife(int nMaxLife)
{
	m_nMaxLife = nMaxLife;
}

//=============================================================================
// 位置の取得処理
//=============================================================================
D3DXVECTOR3 CCharacter::GetPos(void)
{
	return m_pos;
}

//=============================================================================
// 過去の位置の取得処理
//=============================================================================
D3DXVECTOR3 CCharacter::GetPosOld(void)
{
	return m_posOld;
}

//=============================================================================
// 向きの取得処理
//=============================================================================
D3DXVECTOR3 CCharacter::GetRot(void)
{
	return m_rot;
}

//=============================================================================
// 移動量の取得処理
//=============================================================================
D3DXVECTOR3 CCharacter::GetMove(void)
{
	return m_move;
}

//=============================================================================
// 移動量の取得処理
//=============================================================================
float CCharacter::GetColRange(void)
{
	return m_fColRange;
}

//=============================================================================
// 体力の取得処理
//=============================================================================
int CCharacter::GetLife(void)
{
	return m_nLife;
}

//=============================================================================
// 体力最大値の取得処理
//=============================================================================
int CCharacter::GetMaxLife(void)
{
	return m_nMaxLife;
}

//=============================================================================
// 向きの設置処理
//=============================================================================
void CCharacter::SetDiffAngle(float fDiffAngle)
{
	//向きの取得
	D3DXVECTOR3 rot = CCharacter::GetRot();

	if (fDiffAngle > D3DX_PI)
	{
		fDiffAngle -= D3DX_PI * 2.0f;
	}
	if (fDiffAngle < -D3DX_PI)
	{
		fDiffAngle += D3DX_PI * 2.0f;
	}
	rot.y += fDiffAngle * 0.8f;
	if (rot.y > D3DX_PI)
	{
		rot.y -= D3DX_PI * 2.0f;
	}
	if (rot.y < -D3DX_PI)
	{
		rot.y += D3DX_PI * 2.0f;
	}

	//向きの設置処理
	SetRot(rot);
}
